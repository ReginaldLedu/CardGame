{"version":3,"file":"bundle.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,sBAAsB;AACxC;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA,8BAA8B,kBAAkB,GAAG,kBAAkB;AACrE;AACA;AACA,uBAAuB,kBAAkB,GAAG,kBAAkB;AAC9D;AACA,gCAAgC,kBAAkB,GAAG,kBAAkB;AACvE;AACA;AACA,WAAW,kBAAkB,GAAG,kBAAkB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,OAAO;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,8BAA8B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf;AACA,WAAW;AACX;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///./index.js"],"sourcesContent":["const levelsCont = document.querySelector(\".levels\");\r\nconst globalGameState = {};\r\nconst container = document.querySelector(\".container\");\r\n\r\nlet cardsCounter = 0;\r\n\r\nlevels = {\r\n  easy: 6,\r\n  moderate: 12,\r\n  challenging: 18,\r\n};\r\n\r\nconst card = {\r\n  tag: \"div\",\r\n  cls: \"card\",\r\n  content: {\r\n    tag: \"img\",\r\n    cls: \"card__pic\",\r\n    attrs: {\r\n      src: \"src/img/cover.png\",\r\n    },\r\n  },\r\n};\r\nconst cardCont = {\r\n  tag: \"div\",\r\n  cls: \"cards\",\r\n};\r\n\r\nconst startButton = document.querySelector(\".chooseLevel__start\");\r\n\r\nfunction chooseLevel(event) {\r\n  const items = levelsCont.children;\r\n  console.log(items);\r\n  for (let i = 0; i < items.length; i++) {\r\n    if (items[i].classList.contains(\"level__chosen\")) {\r\n      items[i].classList.remove(\"level__chosen\");\r\n    }\r\n  }\r\n\r\n  let target = event.target;\r\n  globalGameState.difficulty = target.className;\r\n  console.log(globalGameState.difficulty);\r\n  target.classList.add(\"level__chosen\");\r\n  console.log(target);\r\n}\r\n\r\nfunction templateEngine(block) {\r\n  if (block === undefined || block === null || block === false) {\r\n    return document.createTextNode(\"\");\r\n  }\r\n  if (\r\n    typeof block === \"string\" ||\r\n    typeof block === \"number\" ||\r\n    block === true\r\n  ) {\r\n    return document.createTextNode(block);\r\n  }\r\n  if (Array.isArray(block)) {\r\n    const fragment = document.createDocumentFragment();\r\n    block.forEach((item) => {\r\n      const el = templateEngine(item);\r\n      fragment.appendChild(el);\r\n    });\r\n    return fragment;\r\n  }\r\n\r\n  const element = document.createElement(block.tag);\r\n  element.classList.add(...[].concat(block.cls).filter(Boolean));\r\n\r\n  if (block.cls) {\r\n    element.classList.add(...[].concat(block.cls).filter(Boolean));\r\n  }\r\n\r\n  if (block.attrs) {\r\n    const keys = Object.keys(block.attrs);\r\n    keys.forEach((key) => {\r\n      // href\r\n      element.setAttribute(key, block.attrs[key]);\r\n    });\r\n  }\r\n\r\n  const content = templateEngine(block.content);\r\n  element.appendChild(content);\r\n  return element;\r\n}\r\n\r\nfunction secondScreen() {\r\n  let cardQuantity = 0;\r\n  container.remove();\r\n  if (globalGameState.difficulty in levels) {\r\n    console.log(globalGameState.difficulty);\r\n  }\r\n  switch (globalGameState.difficulty) {\r\n    case \"easy\":\r\n      cardQuantity = levels.easy;\r\n      break;\r\n    case \"moderate\":\r\n      cardQuantity = levels.moderate;\r\n      break;\r\n    case \"challenging\":\r\n      cardQuantity = levels.challenging;\r\n      break;\r\n  }\r\n  document.body.appendChild(templateEngine(cardCont));\r\n  const cardContainer = document.querySelector(\".cards\");\r\n  for (let i = 0; i < cardQuantity; i++) {\r\n    cardContainer.appendChild(templateEngine(card));\r\n  }\r\n}\r\n\r\nfunction renderCardsScreen() {\r\n  const suits = [\"diamonds\", \"hearts\", \"clubs\", \"spades\"];\r\n  const ranks = [\"6\", \"7\", \"8\", \"9\", \"10\", \"Q\", \"K\", \"J\", \"A\"];\r\n  let indexSuits = 10;\r\n  let indexRanks = 10;\r\n  let k = 0;\r\n  let cards = document.querySelectorAll(\".card__pic\");\r\n  console.log(cards);\r\n\r\n  for (let i = 0; i < cards.length / 2; i++) {\r\n    do {\r\n      indexSuits = Math.round(Math.random() * 10);\r\n    } while (indexSuits > suits.length - 1);\r\n    do {\r\n      indexRanks = Math.round(Math.random() * 10);\r\n    } while (indexRanks > ranks.length - 1);\r\n\r\n    cards[i].src = `src/img/${ranks[indexRanks]}.${suits[indexSuits]}.png`;\r\n    cards[\r\n      i + cards.length / 2\r\n    ].src = `src/img/${ranks[indexRanks]}.${suits[indexSuits]}.png`;\r\n    k++;\r\n    globalGameState[k + 0] = `${ranks[indexRanks]}.${suits[indexSuits]}`;\r\n    globalGameState[\r\n      k + cards.length / 2\r\n    ] = `${ranks[indexRanks]}.${suits[indexSuits]}`;\r\n  }\r\n  console.log(globalGameState);\r\n  const cardsCont = document.querySelector(\".cards\");\r\n  const cardsItem = document.querySelectorAll(\".card\");\r\n  const cardsMix = {\r\n    tag: \"div\",\r\n    cls: \"mix\",\r\n  };\r\n  cardsCont.appendChild(templateEngine(cardsMix));\r\n  const mixCont = document.querySelector(\".mix\");\r\n  console.log(cardsItem.length);\r\n\r\n  for (let i = cardsItem.length; i > 0; i--) {\r\n    if (cardsItem[i - 3]) {\r\n      mixCont.appendChild(cardsItem[i - 3]);\r\n      console.log(i);\r\n    }\r\n  }\r\n\r\n  const cardsContElements = cardsCont.querySelectorAll(\".card\");\r\n  for (let i = 0; i < cardsContElements.length; i++) {\r\n    mixCont.appendChild(cardsContElements[i]);\r\n  }\r\n  console.log(mixCont.children);\r\n}\r\n\r\nfunction cardShow(event) {\r\n  cardsCounter++;\r\n  let target = event.target;\r\n  let card = target.previousElementSibling;\r\n  card.classList.remove(\"hidden\");\r\n  target.classList.add(\"hidden\");\r\n  if (cardsCounter === 1) {\r\n    globalGameState.cardChosen = card.src;\r\n  } else {\r\n    if (globalGameState.cardChosen !== card.src) {\r\n      alert(\"Вы проиграли\");\r\n    } else {\r\n      globalGameState.cardChosen = card.src;\r\n      cardsCounter = 0;\r\n      return cardsCounter;\r\n    }\r\n  }\r\n}\r\n\r\nfunction hideCards() {\r\n  let cardsItems = document.querySelectorAll(\".card\");\r\n  let cardsPics = document.querySelectorAll(\".card__pic\");\r\n  let cardsCont = document.querySelector(\".mix\");\r\n  const coverObject = {\r\n    tag: \"img\",\r\n    cls: \"cover\",\r\n    attrs: {\r\n      src: \"src/img/cover.png\",\r\n    },\r\n  };\r\n  cardsItems.forEach((item) => item.appendChild(templateEngine(coverObject)));\r\n  cardsPics.forEach((item) => item.classList.add(\"hidden\"));\r\n  const headerObj = {\r\n    tag: \"div\",\r\n    cls: \"header\",\r\n    content: [\r\n      {\r\n        tag: \"div\",\r\n        cls: \"time\",\r\n        content: [\r\n          {\r\n            tag: \"div\",\r\n            cls: \"min\",\r\n            content: [\r\n              {\r\n                tag: \"div\",\r\n                cls: \"text\",\r\n                content: \"min\",\r\n              },\r\n              {\r\n                tag: \"div\",\r\n                cls: \"figures\",\r\n                content: \"00\",\r\n                attrs: {\r\n                  id: \"min\",\r\n                },\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            tag: \"div\",\r\n            cls: \"sec\",\r\n            content: [\r\n              {\r\n                tag: \"div\",\r\n                cls: \"text\",\r\n                content: \"sec\",\r\n              },\r\n              {\r\n                tag: \"div\",\r\n                cls: \"figures\",\r\n                content: \"00\",\r\n                attrs: {\r\n                  id: \"sec\",\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        tag: \"div\",\r\n        cls: \"startButtonCont\",\r\n        content: {\r\n          tag: \"button\",\r\n          cls: \"startButton\",\r\n          content: \"Начать заново\",\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  document.body.prepend(templateEngine(headerObj));\r\n  let timer = 0;\r\n  let timerInterval;\r\n  let second = document.getElementById(\"sec\");\r\n  let minute = document.getElementById(\"min\");\r\n\r\n  function start() {\r\n    clearTimer();\r\n    timerInterval = setInterval(function () {\r\n      timer += 1 / 60;\r\n      let secondVal = Math.floor(timer) - Math.floor(timer / 60) * 60;\r\n      let minuteVal = Math.floor(timer / 60);\r\n\r\n      second.innerHTML =\r\n        secondVal < 10 ? \"0\" + secondVal.toString() : secondVal;\r\n      minute.innerHTML =\r\n        minuteVal < 10 ? \"0\" + minuteVal.toString() : minuteVal;\r\n    }, 1000 / 60);\r\n  }\r\n\r\n  function clearTimer() {\r\n    clearInterval(timerInterval);\r\n  }\r\n  start();\r\n  const buttonStart = document.querySelector(\".startButton\");\r\n  buttonStart.addEventListener(\"click\", function () {\r\n    location.reload();\r\n  });\r\n  cardsCont.addEventListener(\"click\", cardShow);\r\n}\r\nconst hideCardsTimer = () => {\r\n  setTimeout(hideCards, 10000);\r\n};\r\n\r\nlevelsCont.addEventListener(\"click\", chooseLevel);\r\nstartButton.addEventListener(\"click\", secondScreen);\r\nstartButton.addEventListener(\"click\", renderCardsScreen);\r\nstartButton.addEventListener(\"click\", hideCardsTimer);\r\n"],"names":[],"sourceRoot":""}